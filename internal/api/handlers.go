// Package handlers crates new handles for the program.
package handlers

import (
	"log"
	"net/http"

	"github.com/gin-gonic/gin"
	ginSwagger "github.com/swaggo/gin-swagger" // gin-swagger middleware
	swaggerFiles "github.com/swaggo/files" // swagger embed files
	
	// swagger embed files
	_ "github.com/vova4o/messagio/docs" // docs is generated by Swag CLI, you have to import it.
	"github.com/vova4o/messagio/internal/models"
	"github.com/vova4o/messagio/internal/web"

)

// Handlers this is a structure that holds linck to service level and Mux (*gin.Engine)
type Handlers struct {
	Sr  Servicer
	Mux *gin.Engine
}

// Servicer interface that describes methods of service level that we will use in Handlers package
type Servicer interface {
	CloseDB() error
	HandleMessage(models.MessageJSON) error
	GiveMeStats() (int, int, error)
	StartConsumeMessages()
}

// NewHandler creates a new layer Handlers
func NewHandler(sr Servicer, mux *gin.Engine) *Handlers {
	return &Handlers{
		Sr:  sr,
		Mux: mux,
	}
}

// SetupRoutes sets up all http routes provided by this server
func (h *Handlers) SetupRoutes() {
	h.Mux.GET("/", h.Index)
	h.Mux.POST("/message", h.MessageRecive)
	h.Mux.GET("/getstat", h.GetStat)
	h.Mux.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))
}

// Index provide new html page
func (h *Handlers) Index(c *gin.Context) {
	web.Render(c.Writer, "test.page.gohtml")
}

// MessageRecive recives message from api handle /message and sends it to service level if everythig is ok sends back JSON with 200 status, if not we get error and a code for whats wrong
// @Summary Get message from user
// @Description Gets message from user and returns the status 200, 400, 500, based on the response.
// @Tags message
// @Accept json
// @Produce json
// @Param data body MessageJSON true "The JSON payload"
// @Success 200 {object} map[string]interface{} "Message received successfully"
// @Failure 400 {object} map[string]interface{} "msg format wrong"
// @Failure 500 {object} map[string]interface{} "msg format wrong"
// @Router /message [post]
func (h *Handlers) MessageRecive(c *gin.Context) {
	var message models.MessageJSON
	err := c.BindJSON(&message)
	if err != nil {
		log.Println(err)
		c.JSON(http.StatusBadRequest, gin.H{"error": "msg format wrong"})
		return
	}

	err = h.Sr.HandleMessage(message)
	if err != nil {
		log.Println(err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "msg format wrong"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"error": err, "message": "message received"})
}

// GetStat when called will return how many total messages in DB and how many of them was marked as readed
// @Summary Request statistic
// @Description Get statistics on messages
// @Tags stats
// @Accept json
// @Produce json
// @Success 200 {object} GetStats "Successful response with total and processed messages count"
// @Failure 500 {object} map[string]interface{} "something went wrong"
// @Router /getstat [get]
func (h *Handlers) GetStat(c *gin.Context) {
	total, processed, err := h.Sr.GiveMeStats()
	if err != nil {
		log.Println(err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "something went wrong"})
		return
	}

	msg := models.GetStats{
		Total:     total,
		Processed: processed,
	}

	c.JSON(http.StatusOK, msg)
}
